<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [L051LoraRang\L051LoraRang.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image L051LoraRang\L051LoraRang.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Dec 14 16:05:51 2021
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; sleep_init &rArr; app_lora_config_init &rArr; SX127X_Lora_init &rArr; SX127X_FreqSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">DMA1_Channel1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">DMA1_Channel1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC1_COMP_IRQHandler</a> from stm32l0xx_it.o(i.ADC1_COMP_IRQHandler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[e]">DMA1_Channel1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[18]">I2C2_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[12]">LPTIM1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1d]">LPUART1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32l0xx_it.o(i.PendSV_Handler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[a]">RCC_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from stm32l0xx_it.o(i.RTC_IRQHandler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[19]">SPI1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1a]">SPI2_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32l0xx_it.o(i.SVC_Handler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l051xx.o(.text)
 <LI><a href="#[15]">TIM21_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[16]">TIM22_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[13]">TIM2_IRQHandler</a> from stm32l0xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[14]">TIM6_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1b]">USART1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1c]">USART2_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l051xx.o(.text)
 <LI><a href="#[21]">fputc</a> from debug_usart_hal.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[1e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[22]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[da]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[db]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[dc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[24]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_main_key
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d0]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_pack
</UL>

<P><STRONG><a name="[2a]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaConfig_Check
</UL>

<P><STRONG><a name="[52]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[e1]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_FreqSet
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaConfig_Check
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_FreqSet
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_FreqSet
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[26]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e4]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[35]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[2f]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2e]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[23]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[e6]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.ADC1_COMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ADC1_COMP_IRQHandler &rArr; HAL_ADC_IRQHandler &rArr; HAL_ADC_ConvCpltCallback &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DIO0_GetState</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sx127x_driver.o(i.DIO0_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DIO0_GetState &rArr; SX127X_DIO0_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_DIO0_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chuchang_lora_process
</UL>

<P><STRONG><a name="[45]"></a>EEPROM_ReadBytes</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bsp_eeprom.o(i.EEPROM_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EEPROM_ReadBytes &rArr; I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NAck
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_factory_parameter
</UL>

<P><STRONG><a name="[4d]"></a>EEPROM_WriteBytes</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, bsp_eeprom.o(i.EEPROM_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EEPROM_WriteBytes &rArr; I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
</UL>

<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; sleep_init &rArr; app_lora_config_init &rArr; SX127X_Lora_init &rArr; SX127X_FreqSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[4f]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[50]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, adc_bat.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_ADC_ConvCpltCallback &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>HAL_ADC_DeInit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_ADC_DeInit &rArr; HAL_ADC_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
</UL>

<P><STRONG><a name="[59]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[3c]"></a>HAL_ADC_IRQHandler</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_ADC_IRQHandler &rArr; HAL_ADC_ConvCpltCallback &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_LevelOutOfWindowCallback
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>

<P><STRONG><a name="[5a]"></a>HAL_ADC_Init</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[58]"></a>HAL_ADC_LevelOutOfWindowCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_LevelOutOfWindowCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>HAL_ADC_MspDeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, adc.o(i.HAL_ADC_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_ADC_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[5b]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[60]"></a>HAL_ADC_Start_IT</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADC_Start_IT &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
</UL>

<P><STRONG><a name="[61]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_1A_WT588S
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rang_runing
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fangchai_runing
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_vol_task
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rung_state
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_key_password
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lora_config_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Reset
</UL>

<P><STRONG><a name="[5c]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
</UL>

<P><STRONG><a name="[62]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, key_hal.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; sleep_init &rArr; app_lora_config_init &rArr; SX127X_Lora_init &rArr; SX127X_FreqSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_key_password
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; sleep_init &rArr; app_lora_config_init &rArr; SX127X_Lora_init &rArr; SX127X_FreqSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mode_config
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_main_key
</UL>

<P><STRONG><a name="[63]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_DIO0_GetState
</UL>

<P><STRONG><a name="[cb]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rang_runing
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fangchai_runing
</UL>

<P><STRONG><a name="[95]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mode_config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_1A_WT588S
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rung_state
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NAck
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_NSS_OUTPUT
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Reset
</UL>

<P><STRONG><a name="[3e]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[8b]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[66]"></a>HAL_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>HAL_InitTick</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, stm32l0xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[68]"></a>HAL_MspInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[5d]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>

<P><STRONG><a name="[6a]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
</UL>

<P><STRONG><a name="[69]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rung_state
</UL>

<P><STRONG><a name="[d5]"></a>HAL_PWREx_EnableFastWakeUp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mode_config
</UL>

<P><STRONG><a name="[d4]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(i.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mode_config
</UL>

<P><STRONG><a name="[d6]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_enter_ed_stop_mode
</UL>

<P><STRONG><a name="[70]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[74]"></a>HAL_RCC_CSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_CSSCallback))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[71]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b7]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_EnableCSS))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[6b]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[6c]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b8]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[72]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[73]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_NMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_NMI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CSSCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[75]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1052 bytes, Stack size 32 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[76]"></a>HAL_RTCEx_SetWakeUpTimer_IT</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_SetWakeUpTimer_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTCEx_SetWakeUpTimer_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[77]"></a>HAL_RTCEx_WakeUpTimerEventCallback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc_bat.o(i.HAL_RTCEx_WakeUpTimerEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_RTCEx_WakeUpTimerEventCallback &rArr; sleep_init &rArr; app_lora_config_init &rArr; SX127X_Lora_init &rArr; SX127X_FreqSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>

<P><STRONG><a name="[78]"></a>HAL_RTCEx_WakeUpTimerIRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_WakeUpTimerIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL_RTCEx_WakeUpTimerIRQHandler &rArr; HAL_RTCEx_WakeUpTimerEventCallback &rArr; sleep_init &rArr; app_lora_config_init &rArr; SX127X_Lora_init &rArr; SX127X_FreqSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>HAL_RTC_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[7a]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[7c]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[7d]"></a>HAL_SPI_DeInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_SPI_DeInit &rArr; HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
</UL>

<P><STRONG><a name="[7f]"></a>HAL_SPI_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[7e]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi.o(i.HAL_SPI_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
</UL>

<P><STRONG><a name="[80]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[81]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadWriteByte
</UL>

<P><STRONG><a name="[6d]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[83]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[6e]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[86]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>HAL_UART_DeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
</UL>

<P><STRONG><a name="[8e]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[8f]"></a>HAL_UART_MspInit</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[93]"></a>HAL_UART_Transmit</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C_Ack</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp_eeprom.o(i.I2C_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadBytes
</UL>

<P><STRONG><a name="[4c]"></a>I2C_NAck</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, bsp_eeprom.o(i.I2C_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadBytes
</UL>

<P><STRONG><a name="[4a]"></a>I2C_ReadByte</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bsp_eeprom.o(i.I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadBytes
</UL>

<P><STRONG><a name="[47]"></a>I2C_SendByte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bsp_eeprom.o(i.I2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteBytes
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadBytes
</UL>

<P><STRONG><a name="[46]"></a>I2C_Start</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp_eeprom.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteBytes
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadBytes
</UL>

<P><STRONG><a name="[49]"></a>I2C_Stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_eeprom.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteBytes
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadBytes
</UL>

<P><STRONG><a name="[48]"></a>I2C_WaitAck</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_eeprom.o(i.I2C_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteBytes
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadBytes
</UL>

<P><STRONG><a name="[97]"></a>Line_1A_WT588S</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, speak_hal.o(i.Line_1A_WT588S))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Line_1A_WT588S &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_2us
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rang_runing
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_password_set
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fangchai_runing
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rung_state
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_key_password
</UL>

<P><STRONG><a name="[99]"></a>LoRaConfig_Check</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, sx127x_driver.o(i.LoRaConfig_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LoRaConfig_Check &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
</UL>

<P><STRONG><a name="[9b]"></a>MX_ADC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, adc.o(i.MX_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_ADC_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>MX_GPIO_Init</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>MX_RTC_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer_IT
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_main_key
</UL>

<P><STRONG><a name="[a0]"></a>MX_SPI1_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NMI_Handler &rArr; HAL_RCC_NMI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RTC_IRQHandler &rArr; HAL_RTCEx_WakeUpTimerIRQHandler &rArr; HAL_RTCEx_WakeUpTimerEventCallback &rArr; sleep_init &rArr; app_lora_config_init &rArr; SX127X_Lora_init &rArr; SX127X_FreqSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>SX127XWriteRxTx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sx127x_driver.o(i.SX127XWriteRxTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX127XWriteRxTx
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TXE_OUTPUT
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RXE_OUTPUT
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StartRx
</UL>

<P><STRONG><a name="[44]"></a>SX127X_DIO0_GetState</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx127x_hal.o(i.SX127X_DIO0_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX127X_DIO0_GetState
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_GetState
</UL>

<P><STRONG><a name="[a6]"></a>SX127X_FreqSet</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, sx127x_driver.o(i.SX127X_FreqSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX127X_FreqSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
</UL>

<P><STRONG><a name="[aa]"></a>SX127X_Lora_init</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, sx127x_driver.o(i.SX127X_Lora_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX127X_Lora_init &rArr; SX127X_FreqSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Reset
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_PoutSet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_FreqSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaConfig_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lora_config_init
</UL>

<P><STRONG><a name="[ad]"></a>SX127X_NSS_OUTPUT</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx127x_hal.o(i.SX127X_NSS_OUTPUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX127X_NSS_OUTPUT
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
</UL>

<P><STRONG><a name="[ac]"></a>SX127X_PoutSet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sx127x_driver.o(i.SX127X_PoutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX127X_PoutSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
</UL>

<P><STRONG><a name="[a4]"></a>SX127X_RXE_OUTPUT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx127x_hal.o(i.SX127X_RXE_OUTPUT))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127XWriteRxTx
</UL>

<P><STRONG><a name="[a9]"></a>SX127X_Read</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx127x_driver.o(i.SX127X_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX127X_Read &rArr; SX127X_ReadBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chuchang_lora_process
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_PoutSet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_FreqSet
</UL>

<P><STRONG><a name="[ae]"></a>SX127X_ReadBuffer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sx127x_hal.o(i.SX127X_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX127X_ReadBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadWriteByte
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_NSS_OUTPUT
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadFifo
</UL>

<P><STRONG><a name="[b0]"></a>SX127X_ReadFifo</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx127x_driver.o(i.SX127X_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX127X_ReadFifo &rArr; SX127X_ReadBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
</UL>

<P><STRONG><a name="[af]"></a>SX127X_ReadWriteByte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx127x_hal.o(i.SX127X_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadBuffer
</UL>

<P><STRONG><a name="[ab]"></a>SX127X_Reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sx127x_driver.o(i.SX127X_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX127X_Reset &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
</UL>

<P><STRONG><a name="[b1]"></a>SX127X_RxPacket</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, sx127x_driver.o(i.SX127X_RxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX127X_RxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadFifo
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chuchang_lora_process
</UL>

<P><STRONG><a name="[b2]"></a>SX127X_SleepMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx127x_driver.o(i.SX127X_SleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX127X_SleepMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_open
</UL>

<P><STRONG><a name="[a7]"></a>SX127X_StandbyMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx127x_driver.o(i.SX127X_StandbyMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rang_data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fangchai_data
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rang_runing
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fangchai_runing
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chuchang_lora_process
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_vol_task
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rung_state
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_PoutSet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_FreqSet
</UL>

<P><STRONG><a name="[b3]"></a>SX127X_StartRx</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sx127x_driver.o(i.SX127X_StartRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX127X_StartRx &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127XWriteRxTx
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chuchang_lora_process
</UL>

<P><STRONG><a name="[a5]"></a>SX127X_TXE_OUTPUT</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx127x_hal.o(i.SX127X_TXE_OUTPUT))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127XWriteRxTx
</UL>

<P><STRONG><a name="[b4]"></a>SX127X_TxPacket</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sx127x_driver.o(i.SX127X_TxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX127X_TxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127XWriteRxTx
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rang_data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fangchai_data
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rang_runing
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fangchai_runing
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_vol_task
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rung_state
</UL>

<P><STRONG><a name="[a8]"></a>SX127X_Write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sx127x_driver.o(i.SX127X_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SleepMode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StartRx
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chuchang_lora_process
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_PoutSet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_FreqSet
</UL>

<P><STRONG><a name="[b5]"></a>SX127X_WriteBuffer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sx127x_hal.o(i.SX127X_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_ReadWriteByte
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_NSS_OUTPUT
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>SystemClock_Config</STRONG> (Thumb, 126 bytes, Stack size 112 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_EnableCSS
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[92]"></a>UART_CheckIdleState</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[90]"></a>UART_SetConfig</STRONG> (Thumb, 506 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[94]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[b9]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e7]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[55]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rang_data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fangchai_data
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rang_runing
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fangchai_runing
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_vol_task
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rung_state
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_key_password
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_factory_parameter
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lora_config_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[3a]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9a]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main_app.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaConfig_Check
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ea]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[bd]"></a>app_lora_config_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main_app.o(i.app_lora_config_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = app_lora_config_init &rArr; SX127X_Lora_init &rArr; SX127X_FreqSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Lora_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>bsp_init_main_key</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, main.o(i.bsp_init_main_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bsp_init_main_key &rArr; MX_RTC_Init &rArr; HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_enter_ed_stop_mode
</UL>

<P><STRONG><a name="[bf]"></a>check_factory_parameter</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main_app.o(i.check_factory_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = check_factory_parameter &rArr; EEPROM_ReadBytes &rArr; I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadBytes
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
</UL>

<P><STRONG><a name="[64]"></a>check_key_password</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, main_app.o(i.check_key_password))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = check_key_password &rArr; key_password_set &rArr; Line_1A_WT588S &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_1A_WT588S
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_password_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[c1]"></a>check_rung_state</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, main_app.o(i.check_rung_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = check_rung_state &rArr; rang_runing &rArr; SX127X_TxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_open
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_1A_WT588S
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rang_runing
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_pack
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fangchai_runing
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>check_vol_task</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, main_app.o(i.check_vol_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = check_vol_task &rArr; sleep_open &rArr; SX127X_SleepMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_open
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_pack
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>chuchang_lora_process</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, main_app.o(i.chuchang_lora_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = chuchang_lora_process &rArr; SX127X_RxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_decrypt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StartRx
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
</UL>

<P><STRONG><a name="[c9]"></a>data_decrypt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sm4_app.o(i.data_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = data_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chuchang_lora_process
</UL>

<P><STRONG><a name="[d1]"></a>data_encrypt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sm4_app.o(i.data_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = data_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_pack
</UL>

<P><STRONG><a name="[98]"></a>delay_2us</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, speak_hal.o(i.delay_2us))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_1A_WT588S
</UL>

<P><STRONG><a name="[ca]"></a>factory_parameter_set</STRONG> (Thumb, 826 bytes, Stack size 24 bytes, main_app.o(i.factory_parameter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = factory_parameter_set &rArr; chuchang_lora_process &rArr; SX127X_RxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_1A_WT588S
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteBytes
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadBytes
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_pack
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_password_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chuchang_lora_process
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_factory_parameter
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>fangchai_runing</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, main_app.o(i.fangchai_runing))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fangchai_runing &rArr; SX127X_TxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_1A_WT588S
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_pack
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rung_state
</UL>

<P><STRONG><a name="[21]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, debug_usart_hal.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[c0]"></a>key_password_set</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, main_app.o(i.key_password_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = key_password_set &rArr; Line_1A_WT588S &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scan_key
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_1A_WT588S
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_key_password
</UL>

<P><STRONG><a name="[cd]"></a>lora_process</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, main_app.o(i.lora_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lora_process &rArr; SX127X_RxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_open
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_decrypt
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Write
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StartRx
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_RxPacket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_Read
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_1A_WT588S
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteBytes
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO0_GetState
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rang_data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fangchai_data
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_pack
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = main &rArr; app_lora_config_init &rArr; SX127X_Lora_init &rArr; SX127X_FreqSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_open
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_vol_task
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rung_state
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lora_config_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c4]"></a>pin_pack</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, main_app.o(i.pin_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pin_pack &rArr; data_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_encrypt
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_rang_data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fangchai_data
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rang_runing
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fangchai_runing
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factory_parameter_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_vol_task
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rung_state
</UL>

<P><STRONG><a name="[c2]"></a>rang_runing</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, main_app.o(i.rang_runing))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rang_runing &rArr; SX127X_TxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_1A_WT588S
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_pack
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rung_state
</UL>

<P><STRONG><a name="[cc]"></a>scan_key</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, key_hal.o(i.scan_key))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_password_set
</UL>

<P><STRONG><a name="[cf]"></a>send_fangchai_data</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main_app.o(i.send_fangchai_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = send_fangchai_data &rArr; SX127X_TxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_pack
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
</UL>

<P><STRONG><a name="[ce]"></a>send_rang_data</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main_app.o(i.send_rang_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = send_rang_data &rArr; SX127X_TxPacket &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_TxPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_StandbyMode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_pack
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
</UL>

<P><STRONG><a name="[65]"></a>sleep_init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(i.sleep_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sleep_init &rArr; app_lora_config_init &rArr; SX127X_Lora_init &rArr; SX127X_FreqSet &rArr; SX127X_StandbyMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DeInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_lora_config_init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_WakeUpTimerEventCallback
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[c6]"></a>sleep_open</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.sleep_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sleep_open &rArr; SX127X_SleepMode &rArr; SX127X_Write &rArr; SX127X_WriteBuffer &rArr; SX127X_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX127X_SleepMode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_enter_ed_stop_mode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_mode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_process
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_vol_task
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_rung_state
</UL>

<P><STRONG><a name="[d2]"></a>stop_mode_config</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, main.o(i.stop_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stop_mode_config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_open
</UL>

<P><STRONG><a name="[d3]"></a>valve_enter_ed_stop_mode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.valve_enter_ed_stop_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = valve_enter_ed_stop_mode &rArr; bsp_init_main_key &rArr; MX_RTC_Init &rArr; HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_main_key
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_open
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9e]"></a>MX_NVIC_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.MX_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_NVIC_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_init_main_key
</UL>

<P><STRONG><a name="[3d]"></a>ADC_ConversionStop</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.ADC_ConversionStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[3f]"></a>ADC_DelayMicroSecond</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.ADC_DelayMicroSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[41]"></a>ADC_Disable</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[42]"></a>ADC_Enable</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADC_Enable &rArr; ADC_DelayMicroSecond &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_IT
</UL>

<P><STRONG><a name="[6f]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[82]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32l0xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[a2]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[84]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[96]"></a>I2C_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_eeprom.o(i.I2C_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NAck
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
</UL>

<P><STRONG><a name="[ba]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[bc]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bb]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
